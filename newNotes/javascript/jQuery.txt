--jQuery width/height/top/left等方法

  width()           height()          //width  与原生js:offsetHeight不能获取隐藏元素的宽高
                      
  innerWidth()      innerHeight()     //width + padding

  outerWidth()      outerHeight()     //width + padding + border   

  outerWidth(true)  outerHeight(true) //width + padding + border+margin   

  可以获取也能设置 如width(80)、outerWidth(80,true)

  可视区尺寸:$(window).height();

  页面的尺寸:$(document).height();

--jQuery 默认滚动高度、距离方法

  $(document).scrollTop(); 有参数为设置

  offset().left   //直接指当前元素到文档的left距离  无论有无定位父级  
       
  left   top

  position().left //指当前元素到定位父级的距离,不包括margin撑开的距离    

  left   top

  //原生js的offsetLeft算法是更positio().left相似 当时包括margin距离

  //图片懒加载的原理:
 
    先设置要懒加载的图片的src为空或默认图片路径，图片真正的路径存在一个自定义属性中

    当文档滚动式判断每个图片的$("img").offset().top 值是否小于文档的$(document).scrollTop() + $(window).hieght()

    如果哪个图片满足的话设置 就将这个图片的自定义属性路径设置为他的src

--jQuery的事件
  
  ---- on方式绑定事件

       --jQuery的所有事件都是绑定的形式的（一个对象的所有同样的事件可以执行不会被覆盖掉）

       --$("div").click(function(){}) 与 $("div").no("click mouseover",function(){}) 两种形式是一模一样的 前面一种写法最终是调用后面写法的

       --$("div").off() //取消该对象的所有事件  可以加参数取消指定事件 off()只适用于以上两种绑定事件的方法

       --on绑定事件扩展

          $("div").on("click","span",{data},function(){}) ;有四个参数

          得到data的数据:ev.data.key

          span参数的作用:本来事件是作用于div，加了这个参数事件就作用于div下的span元素了

  -- return false; //记阻止默认事件有阻止事件冒泡 原生js的return false;是不能阻止绑定形式的默认事件的

  ----事件委托就是把事件委托给父级(触发了父级的什么事件时让当前元素怎样怎样 e.targen表示但钱元素)

      jQuery的事件委托方法 delegate  

      $('ul').delegate('li','click',function(ev){

    	  $(this).css('background','red');

      });

      -- 该方法中的this指的是委托的元素  如li

      -- 如果想要得到$('ul')  就 ev.delegateTarget

      -- 取消委托 $(ev.delegateTarget).undelegate();

  ----命名空间

      --因为jQuery中的事件都是绑定的形式的，所有可以一个对象能有很多个相同的事件,这些事件就能用命名空间划分

      --设置命名空间 就是在类似on形式绑定事件的事件名后加 .命名空间名 就行了 如:$("div").no("click.aaa mouseover",function(){})

      --在取消事件和触发事件时都能使用(与些地方能直接写命名空间，不需要事件名 如:off(".aaa"))

  ----主动触发方法 trigger()

      --$('#input1').trigger('click.aaa');  触发input1的点击事件  //好处:能使用命名空间  

      --$('#input1').click() ;这两种触发方法是一样的

      --triggerHandler() ;该方法和trigger（）方法基本一样,不同点事它主动触发不会触发事件本身自带的默认行为

  ----jQuery的自定义事件

      概念:使用类似on的方式，把事件名改为自定义事件名，后面的函数就是这个事件所有的功能，在通过某种方式时使用trigger("自定义事件名") 方法主动触发就行


--jQuery 的工具方法 $.xxx();

  --jQuery的普通方法都是基于jQuery对象使用的方法

  --工具方法不需要基于对象，它适用于jQuery对象和元素js对象

  -- 常用的工具方法

     $.type(jQuery对象或js原生对象);  //判断对象的类型

     $.isFunction()                

     $.isNumeric()               

     $.isArray()                    

     $.isWindow()    //判断是不是window             

     $.isEmptyObject()    //判断是否为空对象

     $.isPlainObject()    //判断是否为new出来的对象

     $.inArray(查找的元素,所在的数组); //与字符串的indexOF功能一模一样

     $.makeArray(object) //将对象转换为数组

     $.getScript("js文件路径"，成功后执行的函数) //动态载入js文件

     $.getJSON("路径.php?callback=?",成功后的回调); 参数一的要求:只要那个文件返回的是json数据就可以（实现jsonp,callback=?自动生成一个函数名,如果自己知道的话会报错）

     $.noConflict(); //防止库之间的冲突，定义一个变量接收该函数的返回值,这个变量就能代替$了。

     $.each(obj,function(i,val){});遍历数组或json;如果是数组 i 是索引 val是数组元素；如果是json  i是key val是value

     -- 继承 $.extend(); 默认浅拷贝

        var a={name="name"};

        var b={};       

        $.extend( b , a ,{data}); b继承a  ,data为扩中数据，b先继承a，让后data的数据覆盖到b中

        $.extend( true ，b , a ,{data}); true代表深拷贝

    $.proxy(要改变作用于的函数 ，作用域中的this指向的地方)();改变作用域

        传参:可以在调用括号中传，也能在proxy（）中传   

             参数在 $.proxy()中的好处:有时函数不能不能直接调用,要在事件后才调用，那参数就可以写在 Proxy里了 

             $(document).on('click', $.proxy(show,window,3,4) )

    --关于数据解析的工具方法(后端返回什么类型数据就调用转什么类型方法)

      --$.ajax() 中有一个dataType属性,如果在者指定了要得到的数据类型，后端就必须返回什么类型的数据(有了该属性得到的数据不需要解析 就是指定的类型)

        $.parseJSON(data) //只针对严格的json的字符串 安全性好 函数字符串就不能解析

        $.parseHTML()  : 转化HTML的形式的字符串,转成DOM节点，放到一个数组中

        $.parseXML(data)  

        $.isXMLDoc(xmlDoc); //判断是否为xml文档

   ---- $.AJAX();

        ajax跨域问题，在请求页面加上这段代码:

             header('Access-Control-Allow-Origin:http://www.a.com');	//这是允许访问该资源的域 可以通配符*

             ie上有自己的解决方法:XDomainRequest对象  https://www.w3.org/TR/XMLHttpRequest2/

        $.get("url",{data},function(data){成功回调}，dataType).error(function(){错误回调}) //$.psot()也一样

        $("form").serialize();序列化表单

        $("div").load("page.html .box",function(){}) //参数一、页面地址里的内容加载到div中 后面的是筛选条件，参数二、成功后执行的函数

        ajax的全局方法

           $(document).ajaxStart(function(e){});当一个ajax请求开始时候怎样                              
           $.ajaxStop(); 请求结束是怎样                                   
           $.ajaxSuccess()                              
           $.ajaxError()                                   
           $.ajaxComplete()                           
           $.ajaxSend()                                  

        更多ajax的属性及方法

             http://www.cnblogs.com/heyuquan/archive/2013/05/13/js-jquery-ajax.html


--jQuery中的动画

  有三类自带动画 都有自己的对应的toggle方法

  注:toggleClass();用法一样	
   
  --animate();自定义动画

    参数一、数据 css样式

            --数值的运算操作 如:"width":"+=100",  宽度为原始宽度+100


    参数二、时间

    参数三、运动形式  jQuery中只有两种 缓冲慢快慢（swing）和匀速（linear）

    参数四、运动结束的回调


   -- animate的第二种写法 （第二种写法可以扩展更多参数如 step	）

                $('#div1').animate({

			num : "move"//因为不需要用到变化，但是必须不能空所以需要一对键值站位

		},{

			duration : 2000,

			easing : 'linear',

			complete : function(){

				//alert(123);

			},
			step : function(a,b){  //可以检测我们定时器的每一次变化

				//console.log(a);

				//console.log(b.pos);   //运动过程中的比例值(0~1)

				$('#div1').html(parseInt(b.pos * 273826678)+起始值); //让div1里的值在两秒事件内从起始值匀速变为273826678
			}
		});

   --jQuery的animate有队列的概念

     每执行一次animate函数后jQuery源代码中都会有一个数组存储每个动画，按顺序执行

     一个对象执行多次animate方法不会同时执行，他会按顺序执行 delay(time) 运动延迟

  -- stop() 与 finish()

     $('#div1').stop();    //默认情况下 : 只会停止当前运动  ，还有清空队列的作用
		
     $('#div1').stop(true);  //第一个参数 : 可以停止所有的运动
		
     $('#div1').stop(true,true); //第二个参数 : 可以停止到指定的目标点(当前的)
		
     $('#div1').finish();   //让所有的运动直接到达指定目标点       

--jQuery的杂方法

  --end() addBack();操作当前元素的上一级（jQuery操作的上一级，如:#("div").next()）;end()不包括当前元素，addBack包括当前元素

  --add();前面的集合中添加一个元素

  --html("") 与 empty(); 都能清空节点内容

  --remove() 与 detach() ; 都是删除宇哥元素节点并返回该元素，但是detach()返回的元素包括设置过的操作行为         

  --ele1.replaceWith(ele2) ; 要用ele2替换掉ele1   ele1.replaceAll(ele2) ; 要用ele1替换掉ele2 

  --focus/blur 与 focusin/focusout 的区别

    有焦点的元素默认是不支持事件冒泡的

    jQuery中如使用 focusin用在焦点元素的父级，当焦点元素的到焦点是就会触发父级的focusin事件

    焦点元素本身也能用focusin方法，focusin的方法比focus方法执行顺序高

  --one方式绑定事件 只能触发一次or
  
  --加载方法 $(function(){}) 与 $(window).load(function(){}) 的差别

    前者与ready()方法完全一样

    后者在也没上只能写一个，如果有多个只会执行最后一个，前面的可以写多个

    使用前者可以给特殊一点的元素家load方法

    前者是等页面上的DOM节点加载完就执行，后者是等整个页面加载完才执行(包括引入的文件什么的)

  --数据缓存:data()

    data()和attr()方法的用法和功能是基本一样的

    data()方法不把设置的key单做对象的属性加到对象的身上，而是存在jQuery身上的一个集合中(如果要存比较大的数据就用该方法)

    --attr()与prop();(两者最后不要用到同一个元素上)

      attr();对原生js是 getAttribute() 方式添加属性;

      prop();对原生 . [] 方式添加属性 (操作复选框最后用这个)

      前者设置自定义属性可以出现在页面上,后者不行

      各自设置的属性只有自己能够获取

       prop设置的属性不好加到页面上，attr会

    --removeData(),removeAttr();removeProp();

 ----特殊方法中回调方法(把回调中的返回值较大对应元素中)

     $(".element").addClass(function(i,oldClass){  }) //i代表选中元素的索引，参数二是本来就有的类

     $(".element").html(function(i,oldClass){  }) //i代表选中元素的索引，参数二是本来就有的html内容

     $(".element").val(function(i,oldClass){  }) //i代表选中元素的索引，参数二是本来就有的value值

 ----jQuery中的队列操作

     $.queue(); 入队

     $.dequeue();出队 

     使用: $.queue(作用域,队名，队员) //队员必须是函数

           $.dequeue(作用域，队名) //执行第一次就走前面第一个,执行时自动执行对应的函数

      或 $("div").queue(队名，队员);

         $("div").dequeue(队名);

     例子:animate用的就是队列，他的队名是fx

 ----函数统一管理 $.Callbacks(); .add() //添加函数 .fire()//执行 .remove() //删除函数

      

    

  

    
 








